package dev.sigstore.pgp;

//
// Copyright 2021 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import static java.nio.file.Files.createDirectories;
import static java.nio.file.Files.writeString;
import static java.nio.file.Paths.get;
import static org.assertj.core.api.Assertions.assertThat;

import java.io.File;
import java.nio.file.Path;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

@RunWith(Parameterized.class)
public class PgpSigningTest {

  private String gpgHomedir;
  private Path basedir;
  private Path sourceGpgHomedir;
  private Path workingGpgHomedir;
  private Path armoredPublicKey;
  private Path armoredPrivateKey;

  public PgpSigningTest(String gpgHomedir) {
    this.gpgHomedir = gpgHomedir;
    this.basedir = get(System.getProperty("basedir", new File("").getAbsolutePath()));
    this.sourceGpgHomedir = basedir.resolve("src/test/gpghomes/" + gpgHomedir);
    this.workingGpgHomedir = basedir.resolve("target/gpghomes/" + gpgHomedir);
    this.armoredPublicKey = sourceGpgHomedir.resolve("public-key.asc");
    this.armoredPrivateKey = sourceGpgHomedir.resolve("private-key.asc");
  }

  @Parameters(name = "{0}")
  public static String[] input() {
    return new String[] {
        "gpg-2.2.34-Darwin-12.3.1-x86_64",
        "gpg-2.2.31-Alpine-Linux-3.15.4-x86_64",
        "gpg-2.2.19-Ubuntu-Linux-20.04-x86_64",
        "gpg-2.2.27-Ubuntu-Linux-22.04-x86_64"
    };
  }

  //
  // Java does not seem to preserve enough of the file attributes on copying to satisfy GPG's
  // verification of key material. So I won't copy these and I'll use the source material in-situ
  // and make a working directory for signature generation.
  //

  @Test
  public void pgpSigningWithFirstFoundPrivateKey() throws Exception {
    // Name for our test artifact
    String artifactName = "artifact-1.0.jar";

    // Path to our generate test artifact
    Path artifact = testArtifact(artifactName);

    // Create the PGP signing request
    PgpSigningRequest request = ImmutablePgpSigningRequest.builder()
        .gpgHomedir(sourceGpgHomedir)
        .build();

    // Signing
    PgpSigner signer = new PgpSigner(request);
    signer.sign(artifact.toFile());

    // Verification
    PgpSigner verifier = new PgpSigner(request);

    // Signature generated by the signing process
    Path signature = target(artifactName + ".asc");

    // Verify the signature
    assertThat(verifier.verify(armoredPublicKey, artifact, signature)).isTrue();
  }

  @Test
  public void pgpSigningWithArmoredrivateKey() throws Exception {
    // Name for our test artifact
    String artifactName = "artifact-1.0.jar";

    // Path to our generate test artifact
    Path artifact = testArtifact(artifactName);

    // Create the PGP signing request
    PgpSigningRequest request = ImmutablePgpSigningRequest.builder()
        .privateKeyFromPath(armoredPrivateKey)
        .privateKeyPassphrase("sigstore")
        .build();

    // Signing
    PgpSigner signer = new PgpSigner(request);
    signer.sign(artifact.toFile());

    // Verification
    PgpSigner verifier = new PgpSigner(request);

    // Signature generated by the signing process
    Path signature = target(artifactName + ".asc");

    // Verify the signature
    assertThat(verifier.verify(armoredPublicKey, artifact, signature)).isTrue();
  }

  protected Path testArtifact(String artifactName) throws Exception {
    Path workingArtifact = target(artifactName);
    createDirectories(workingArtifact.getParent());
    writeString(workingArtifact, artifactName);
    return workingArtifact;
  }

  protected Path target(String name) {
    return workingGpgHomedir.resolve(name);
  }
}
