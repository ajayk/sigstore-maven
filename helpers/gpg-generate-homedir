#!/usr/bin/env sh

# This script will produce an independent standalone directory with a keypair using your version of gpg that
# can be used in an automated test harness. The output has no personal information in it.

gpgVersion="$(gpg --version | head -1 | sed -ne 's/[^0-9]*\(\([0-9]\.\)\{0,4\}[0-9][^.]\).*/\1/p')"
os="$(uname)"
arch="$(uname -m)"

if [ "${os}" = "Darwin" ]; then
  osVersion="$(sw_vers | grep ProductVersion | sed -e 's/ProductVersion:.//')"
elif [ "${os}" = "Linux" ]; then
  if [ -f /etc/os-release ]; then
    echo "We found /etc/os-release ..."
    . /etc/os-release
    # Alpine -> ${NAME} = Alpine-Linux
    # Ubunut -> ${NAME} = Ubuntu
    os="$(echo ${NAME} | sed -e 's/ .*$//')-${os}"
    osVersion="${VERSION_ID}"
  fi
fi

gpgHome="$(pwd)/gpg-${gpgVersion}-${os}-${osVersion}-${arch}"
echo ${gpgHome}

[ -d ${gpgHome} ] && rm -rf ${gpgHome}
mkdir -p ${gpgHome}
cd ${gpgHome}

export GNUPGHOME="${gpgHome}"
cat > gpg.config <<EOF

%echo Generating Test GPG Key
Key-Type: DSA
Key-Length: 1024
Subkey-Type: default
Subkey-Length: 1024
Name-Real: Sigstore PGP Tester
Name-Comment: Test PGP Homedir
Name-Email: tester@sigstore.dev
Expire-Date: 0
Passphrase: sigstore
%commit

EOF

# None of this works on Ubuntu 20.04, I just did it manually in the docker container mount

echo "sigstore" > .pgp.passphrase
# Remove the home directory reference
gpg --version | sed 's/^Home.*$//' > gpg.version
gpg --batch --generate-key gpg.config
gpg --batch --output public-key.asc --armor --export tester@sigstore.dev
# https://unix.stackexchange.com/questions/60213/gpg-asks-for-password-even-with-passphrase
# Works on Mac, Alpine-Linux
echo sigstore | gpg --batch --yes --pinentry-mode=loopback --passphrase sigstore --armor --output private-key.asc --export-secret-keys tester@sigstore.dev
gpg --list-secret-keys --keyid-format=long
# Remove all the socket files
rm -f S\.*
